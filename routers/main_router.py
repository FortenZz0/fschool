from aiogram import types, F, Router, html
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from netschoolapi import NetSchoolAPI

import sqlite3

from handlers import time_handler as time_h
from handlers import days_handler as days_h
from handlers import diary_handler as diary_h
from handlers import output_handler as out_h
from handlers import marks_handler as marks_h



BUTTONS = {
    "login": "–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç üîê",
    "diary": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì",
    "marks": "–û—Ü–µ–Ω–∫–∏ ü•á",
    "time": "–í—Ä–µ–º—è –¥–æ... ‚è∞",
    "school": "–û —à–∫–æ–ª–µ üè´",
    "duty": "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è üòé"
}


router = Router()


db_con = sqlite3.connect("data.db")
db_cur = db_con.cursor()



class Form(StatesGroup):
    input_login_info = State()



class Using(StatesGroup):
    get_diary = State()
    get_marks = State()
    get_time = State()
    get_duty = State()



def check_login(tg_us: str) -> bool:
    res = db_cur.execute(f"SELECT tg_us FROM users WHERE tg_us='{tg_us}'")
    
    return bool(res.fetchone())


async def login(tg_us: str, url: str, lg: str, password: str, school_name: str) -> bool:
    if check_login(tg_us):
        return True
    
    success = False
    
    ns = NetSchoolAPI(url)
    
    if not ns:
        return False
    
    try:
        await ns.login(
            lg,
            password,
            school_name
        )
        
        success = True
        
    except:
        return False
    
    if success and ns:
        values = [
            (tg_us, url, lg, password, school_name)
        ]
        
        db_cur.executemany(f"INSERT INTO users VALUES(?, ?, ?, ?, ?)", values)
        db_con.commit()
        
        await ns.logout()
        return True
        
    return False


async def get_NetSchoolAPI(tg_us: str) -> NetSchoolAPI | None:
    data = db_cur.execute(f"SELECT url, login, pass, school_name FROM users WHERE tg_us='{tg_us}'").fetchone()
    
    if not data:
        return None
    
    ns = NetSchoolAPI(data[0])
    
    try:
        await ns.login(*data[1:])
        
        return ns
    except:
        return None
        

def get_keyboard(tg_us: str) -> types.ReplyKeyboardMarkup:
    kb = []
    placeholder = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É"
    one_click = False
    
    if check_login(tg_us):
        kb = [
            [
                types.KeyboardButton(text=BUTTONS["diary"]),
                types.KeyboardButton(text=BUTTONS["marks"])
            ],
            [
                types.KeyboardButton(text=BUTTONS["time"]),
                types.KeyboardButton(text=BUTTONS["school"])
            ],
            [
                types.KeyboardButton(text=BUTTONS["duty"])
            ]
        ]
    else:
        kb = [[
                types.KeyboardButton(text=BUTTONS["login"]),
        ]]
        
        placeholder = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç"
        one_click = True
        
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder=placeholder,
        one_time_keyboard=one_click
    )
        
    return keyboard



@router.message(Command("start"))
async def start_handler(msg: Message):
    keyboard = get_keyboard(msg.from_user.username)
    
    await msg.answer(
"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üëã\nFSchool - —ç—Ç–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞–º–∏. \
–í –Ω—ë–º —Å–æ–±—Ä–∞–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫ –∫–æ—Ç–æ—Ä—ã–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø!\n\n\
–ò–∑ –ø–ª—é—Å–æ–≤:\n\
  ‚úÖ –ù–µ –Ω—É–∂–Ω–æ –≤—Ö–æ–¥–∏—Ç—å –≤ –∞–∫–∫–∞—É–Ω—Ç –ö–ê–ñ–î–´–ï 5 –ú–ò–ù–£–¢ (—á—Ç–æ –Ω–µ —Å–∫–∞–∂–µ—à—å –æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —ç–ª. –¥–Ω–µ–≤–Ω–∏–∫–æ–≤)\n\
  ‚úÖ –ë–´–°–¢–†–´–ô –∏ –ë–ï–°–ü–õ–ê–¢–ù–´–ô –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç\n\
  ‚úÖ –®–∏—Ä–æ–∫–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –¥–Ω–µ–≤–Ω–∏–∫–µ",
        reply_markup=keyboard
    )
    
    if not check_login(msg.from_user.username):
        await msg.answer(f"–î–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç —Å–≤–æ–µ–≥–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É \"{BUTTONS['login']}")



@router.message(F.text.lower() == BUTTONS["login"].lower())
async def login_handler(msg: Message, state: FSMContext):
    await msg.answer(
f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç —Å–µ—Ç–µ–≤–æ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞ (–±–µ–∑ —Å–∫–æ–±–æ–∫):\n\
  [–°–ê–ô–¢ –î–ù–ï–í–ù–ò–ö–ê]\n\
  [–í–ê–® –õ–û–ì–ò–ù]\n\
  [–í–ê–® –ü–ê–†–û–õ–¨]\n\
  [–ù–ê–ó–í–ê–ù–ò–ï –®–ö–û–õ–´]\n\n\
–ü–æ–¥—Å–∫–∞–∑–∫–∞, –≥–¥–µ –±—Ä–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ:\n\
- –°–∞–π—Ç –¥–Ω–µ–≤–Ω–∏–∫–∞: —Å—Å—ã–ª–∫–∞ –Ω–∞ —ç–ª. –¥–Ω–µ–≤–Ω–∏–∫ (https://####.ru)\n\
      –õ–∏–±–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å {html.link('–°–ø–∏—Å–∫–æ–º –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ –°–ì–û', 'https://web.archive.org/web/20221204181741/https://sg-o.ru/')}\n\
      (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏)\n\
- –í–∞—à –ª–æ–≥–∏–Ω: –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ —ç–ª. –¥–Ω–µ–≤–Ω–∏–∫–∞\n\
- –í–∞—à –ø–∞—Ä–æ–ª—å: –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ —ç–ª. –¥–Ω–µ–≤–Ω–∏–∫–∞\n\
- –ù–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã: –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∫–æ–ª–µ –≤ —ç–ª. –¥–Ω–µ–≤–Ω–∏–∫–µ"
    )
    
    await state.set_state(Form.input_login_info)
    


@router.message(Form.input_login_info)
async def login_process(msg: Message, state: FSMContext):
    info = msg.text.split("\n")
    
    if not info or len(info) < 4:
        await msg.answer("‚ùå –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        await state.set_state(Form.input_login_info)
        
        return
    
    repl_message = await msg.answer(
        "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—è—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç..."
    )
    
    tg_us = msg.from_user.username
    
    if await login(tg_us, *info):
        await repl_message.delete()
        
        await msg.answer(
            "‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!",
            reply_markup=get_keyboard(tg_us)
        )
    else:
        await repl_message.edit_text("‚ùå –ù–µ —É–¥–∞—ë—Ç—Å—è –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        return
    
    await state.clear()
    
    
    


@router.message(F.text.lower() == BUTTONS["school"].lower())
async def school_handler(msg: Message):
    ns = await get_NetSchoolAPI(msg.from_user.username)
    
    if not ns:
        await msg.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º—É –¥–Ω–µ–≤–Ω–∏–∫—É!"
        )
        
        return
    
    info = await out_h.print_school_info(ns)
    await msg.answer(info)