from aiogram import types, F, Router, html
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from datetime import datetime, date, time
from netschoolapi import NetSchoolAPI

from handlers import time_handler as time_h
from handlers import days_handler as days_h
from handlers import diary_handler as diary_h
from handlers import output_handler as out_h
from handlers import marks_handler as marks_h



router = Router()




class Form(StatesGroup):
    input_login_info = State()



def check_login(tg_us: str) -> bool:
    return False


async def login(tg_us: str, url: str, lg: str, password: str, school_name: str) -> bool:
    success = False
    
    ns = NetSchoolAPI(url)
    
    if not ns:
        return False
    
    try:
        await ns.login(
            lg,
            password,
            school_name
        )
        
        success = True
        
    except:
        return False
    
    if success and ns:
        
        
        await ns.logout()
        return True
        
    return False
        

def get_keyboard(tg_us: str) -> tuple[types.ReplyKeyboardMarkup, str, bool]:
    kb = []
    placeholder = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É"
    one_click = False
    
    if check_login(tg_us):
        kb = [
            [
                types.KeyboardButton(text="–ö–Ω–æ–ø–∫–∞ 1"),
                types.KeyboardButton(text="–ö–Ω–æ–ø–∫–∞ 2")
            ]
        ]
    else:
        kb = [[
                types.KeyboardButton(text="–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç üîê"),
        ]]
        
        placeholder = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç"
        one_click = True
        
    return kb, placeholder, one_click



@router.message(Command("start"))
async def start_handler(msg: Message):
    kb, placeholder, one_click = get_keyboard(msg.from_user.username)
    
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder=placeholder,
        one_time_keyboard=one_click
    )
    
    await msg.answer("Hello world!", reply_markup=keyboard)



@router.message(F.text.lower() == "–≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç üîê")
async def login_handler(msg: Message, state: FSMContext):
    await msg.answer(
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç —Å–µ—Ç–µ–≤–æ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞ (–±–µ–∑ —Å–∫–æ–±–æ–∫):\n\
  [–°–ê–ô–¢ –î–ù–ï–í–ù–ò–ö–ê]\n\
  [–í–ê–® –õ–û–ì–ò–ù]\n\
  [–í–ê–® –ü–ê–†–û–õ–¨]\n\
  [–ù–ê–ó–í–ê–ù–ò–ï –®–ö–û–õ–´]\n\n\
–ü–æ–¥—Å–∫–∞–∑–∫–∞, –≥–¥–µ –±—Ä–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ:\n\
- –°–∞–π—Ç –¥–Ω–µ–≤–Ω–∏–∫–∞: —Å—Å—ã–ª–∫–∞ –Ω–∞ —ç–ª. –¥–Ω–µ–≤–Ω–∏–∫ (https://####.ru)\n\
      –õ–∏–±–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å {html.link('–°–ø–∏—Å–∫–æ–º –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ –°–ì–û', 'https://web.archive.org/web/20221204181741/https://sg-o.ru/')}\n\
      (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏)\n\
- –í–∞—à –ª–æ–≥–∏–Ω: –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ —ç–ª. –¥–Ω–µ–≤–Ω–∏–∫–∞\n\
- –í–∞—à –ø–∞—Ä–æ–ª—å: –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ —ç–ª. –¥–Ω–µ–≤–Ω–∏–∫–∞\n\
- –ù–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã: –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∫–æ–ª–µ –≤ —ç–ª. –¥–Ω–µ–≤–Ω–∏–∫–µ"
    )
    
    await state.set_state(Form.input_login_info)
    


@router.message(Form.input_login_info)
async def login_handler(msg: Message, state: FSMContext):
    info = msg.text.split("\n")
    
    if not info or len(info) < 4:
        await msg.answer("‚ùå –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        await state.set_state(Form.input_login_info)
        
        return
    
    repl_message = await msg.answer(
        "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—è—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç..."
    )
    
    if await login(msg.from_user.username, *info):
        await repl_message.edit_text("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
    else:
        await repl_message.edit_text("‚ùå –ù–µ —É–¥–∞—ë—Ç—Å—è –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        return
    
    await state.clear()